#!/usr/bin/env bash

FMT_RED=$(echo -e '\033[1;31m')
FMT_GREEN=$(echo -e '\033[1;32m')
FMT_YELLOW=$(echo -e '\033[1;33m')
FMT_BOLD=$(echo -e '\033[1;1m')
FMT_RESET=$(echo -e '\033[1;0m')

set -e

main() {
    parse_args "$@"
    SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")
    BUBASH_PATH=$(git -C "${SCRIPT_DIR}" rev-parse --show-toplevel)

    cd "${BUBASH_PATH}/stow"
    handle_packages

    echo "${FMT_GREEN}Installation complete.${FMT_RESET}"
}

parse_args() {
    while [[ $# -gt 0 ]]; do
      case $1 in
        -u|--undo)
          BUBASH_UNDO="1"
          shift
          ;;
        -n|--dry-run)
          BUBASH_DRY_RUN="1"
          shift
          ;;
        *)
          bail "Unknown option $1"
          exit 1
          ;;
      esac
    done
}

handle_packages() {
    local packages=()
    local mkdirs=()

    for path in */stow.conf; do
        package=$(dirname "${path}")

        BUBASH_LINUX=
        BUBASH_MAC=
        BUBASH_MKDIR=()
        source "${package}/stow.conf"

        should_skip && continue

        packages+=("${package}")
        mkdirs+=("${BUBASH_MKDIR[@]}")
    done

    if [[ "${BUBASH_DRY_RUN}" != 1 && "${BUBASH_UNDO}" != 1 ]]; then
        mkdir -p $(printf "${HOME}/%q " "${mkdirs[@]}")
    fi

    local cmd=(stow -v --ignore=stow\\.conf)
    [[ "${BUBASH_DRY_RUN}" == 1 ]] && cmd+=(-n)
    [[ "${BUBASH_UNDO}" == 1 ]] && cmd+=(-D)
    cmd+=(-t "${HOME}" "${packages[@]}")
    eval $(printf "%q " "${cmd[@]}")
}

should_skip() {
    case $(uname -s) in
      Linux) [[ "${BUBASH_LINUX}" != 1 ]] ;;
      Darwin) [[ "${BUBASH_MAC}" != 1 ]] ;;
      *) bail "Unexpected uname: $os" ;;
    esac
}

print_error() {
    echo "${FMT_BOLD}${FMT_RED}Error: $@${FMT_RESET}"
}

check_dependencies_Linux() {
    assert_installed \
        'zsh' "$(apt_install_cmd zsh)" \
        'git' "$(apt_install_cmd git)" \
        'stow' "$(apt_install_cmd stow)"
}

check_dependencies_Darwin() {
    true
}

prompt_and_do() {
    read -r -p "$1 [y/N] " REPLY
    shift
    case "$REPLY" in [yY]|[yY][eE][sS]) eval "$*" ;;
                                     *) exit 1 ;;
    esac
}

handle_not_installed() {
    print_error "${cmd} is not installed."
}

assert_installed() {
    while [ $# -gt 1 ]; do
        local cmd=$1
        local install_cmd=$2
        shift 2

        command_exists "${cmd}" && continue
        print_error "${cmd} is not installed."

        prompt_and_do \
            "Do you want to install ${cmd} via ${FMT_YELLOW}${install_cmd}${FMT_RESET}?" \
            "${install_cmd}"
    done
}

command_exists() {
    command -v "$@" &>/dev/null
}

bail() {
    print_error "$@"
    exit 1
}

apt_install_cmd() {
    echo "sudo bash -c 'apt update && apt install -y $@'"
}

main "$@"
